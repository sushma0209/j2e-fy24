PROGRAM 1

import java.util.*;

class p1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        System.out.println(slice(a));
    }

    public static int slice(int[] a) {
        int n = a.length;
        int t = 0;
        for (int i = 0; i < n; i++) {
            int c = 0;
            for (int j = i + 1; j < n - 1; j++) {
                if (a[i] == a[j]) {
                    c++;
                }
            }
            if (c <= 1) {
                t++;
            }
        }
        return t;
    }
}



PROGRAM 2

public class p2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        int amount = sc.nextInt();
        System.out.println(coin(a, amount));
    }

    public static int coin(int[] a, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        for (int c : a) {
            for (int i = c; i <= amount; i++) {
                dp[i] = Math.min(dp[i], dp[i - c] + 1);
            }
        }
        return dp[amount] <= amount ? dp[amount] : -1;
    }
}



PROGRAM 3

import java.util.Scanner;
import java.util.Vector;

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

            int n = scanner.nextInt();
            Vector<Long> a = new Vector<>();
            long mn = Integer.MAX_VALUE;
            for (int i = 0; i < n; i++) {
                long num = scanner.nextLong();
                a.add(num);
                mn = Math.min(mn, num);
            }
            long ans = 0;
            for (int i = 0; i < n; i++) {
                ans += a.get(i) - mn;
            }
            System.out.println(ans);

    }
}



PROGRAM 4

public class P4{
    public static int minPillsToSurvive(int N, int V, int[] a) {
        int pillsTaken = 0;
        int health = V;

        for (int i = 0; i < N; i++) {
            if (health <= 0) {
                break; 
            }

            if (a[i] > 1 && health <= 1) {

                pillsTaken++;
                health = a[i] - 1;
            } else if (a[i] > health) {

                pillsTaken++;
                health = a[i];
            }

            health--;
        }

        return pillsTaken;
    }
}



PROGRAM 5

import java.util.*;

public class p5 {
    public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(list, new ArrayList<>(), nums, 0);
        return list;
    }

    private static void backtrack(List<List<Integer>> list, List<Integer> tempList, int[] nums, int start) {
        list.add(new ArrayList<>(tempList));
        for (int i = start; i < nums.length; i++) {
            tempList.add(nums[i]);
            backtrack(list, tempList, nums, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}



PROGRAM 6

import java.util.*;
public class p6 {
    public static int single(int[] a) {
        Arrays.sort(a);
        int n = a.length;
        for (int i = 0; i < n; i++) {
            if (a.length == 1) {
                return a[i];
            }
            if (i == n - 1) {
                return a[i];
            }
            if (a[i] == a[i + 1] && a[i + 1] == a[i + 2]) {
                i = i + 2;
            } else {
                return a[i];
            }
        }
        return -1;
    }

}



PROGRAM 7

class p7{
	static int minXOR(int arr[], int n)
	{
		int min_xor = Integer.MAX_VALUE; 
		for (int i = 0; i < n; i++){
			for (int j = i + 1; j < n; j++){
				min_xor = Math.min(min_xor, arr[i] ^ arr[j]);
			}
		}
		return min_xor;
	}
}




PROGRAM 8

import java.util.*;
public class p8 {
    public static int single(int[] a) {
        Arrays.sort(a);
        int n = a.length;
        for (int i = 0; i < n; i++) {
            if (a.length == 1) {
                return a[i];
            }
            if (i == n - 1) {
                return a[i];
            }
            if (a[i] == a[i + 1]) {
                i = i + 1;
            } else {
                return a[i];
            }
        }
        return -1;
    }

}





PROGRAM 9

import java.util.*;
public class p9 {
    public static int hammingDistance(int x, int y) {
        int z = x ^ y;
        int res = 0;
        while (z > 0) {
            res++;
            z = z & (z - 1);
        }
        return res;
    }

}




PROGRAM 10

import java.io.*;

class Solution{
	public static int reverseBits(int n)
	{
		int rev = 0;
		while (n > 0) {
			rev <<= 1;
			if ((int)(n & 1) == 1)
				rev ^= 1;
			n >>= 1;
		}
		return rev;
	}
}